vi README.md
vi .gitignore
ls
npm run deploy
npm run build
npm run dev
vi src/pages/crawler.js
cd ../../
vi crawler.js
cp index.js crawler.js
cd pages
cd src
vi package.json
vi src/pages/index.js
vi index.js
cd i
cd pages/
npm scripts dev
npm dev
npm install
ll
ls -a
nvm use v14.21.3
nvm install v14.21.3
nvm list-remote
npm install > npm_install.log
node -v
nvm use v16.20.2
nvm install v16.20.2
rm -rf node_modules
npm install yarn
yarn install
sudo apt install yarn
sudo rm -rf node_modules
sudo rm rf node_modules
npm config set unsafe-perm true
npm config set user 0
npm install vips
vi gatsby-config.js
fisher install jorgebucaran/nvm.fish
npm install -g npm
vi npm_install.log
cd yuukimiyoshi.info/
gh repo clone yuukimiyo/yuukimiyoshi.info
cd workspace/
cd
ssh yuuki@minibox
exit
vi run.sh
cd web-archive/
cd sandbox/
cd my-storage/
cd ..
sudo shutdown -h now
ssh yuuki@192.168.10.100
docker ps
docker run -p 8080:8080 -v /opt/pywb-data/:/webarchive webrecorder/pywb wayback
docker run -e INIT_COLLECTION=my-web-archive -v /opt/pywb-data:/webarchive -v /home/yuuki/sandbox/pywb-sample-source:/source pywb-pywb wb-manager add my-web-archive /source/WEB-20231126003820420-00000-48~h3w~8443.warc.gz
docker run -e INIT_COLLECTION=my-web-archive -v /opt/pywb-data:/webarchive -v /home/yuuki/sandbox/pywb-sample-source:/source pywb-pywb wb-manager add my-web-archive /source/WEB-20231128163014102-00000-46~h3w~8443.warc.gz
sudo chown yuuki:yuuki pywb-data
cd /opt
vi Dockerfile
cd pywb
docker images | grep pywb
docker images | pywb
docker images
vi docker-entrypoint.sh
docker run -e INIT_COLLECTION=my-web-archive -v /opt/pywb-data:/webarchive -v /home/yuuki/sandbox/pywb-sample-source:/source webrecorder/pywb wb-manager add my-web-archive /source/WEB-20231128163014102-00000-46~h3w~8443.warc.gz
sudo reboot
docker
ps -A | grep docker
kill 4467
sudo kill 4467
sudo kill 4427
kill 4427
ps -A
ps -
a
docker-credential-desktop
docker-desktop
docker desktop
docker manager
sudo su
docker run -e INIT_COLLECTION=my-web-archive -v /opt/pywb-data:/webarchive \
   -v /home/yuuki/sandbox/pywb-sample-source:/source webrecorder/pywb wb-manager add my-web-archive /source/WEB-20231128163014102-00000-46~h3w~8443.warc.gz
mkdir pywb-sample-source
cd sandbox
docker pull webrecorder/pywb
mkdir web-archive
pip install pywb
cd warcs
cd sample_archive/
vi example.cdx
cd cdx
vi config.yaml
cd pywb/
docker compose up -d
vi docker-compose.yaml
vi docker-compose.yml
git clone git@github.com:webrecorder/pywb.git
docker container run -it --rm -v ./owb:/data -p 8080:8080 iipc/openwayback
cd files1/
cd owb/
cd openwayback/
vi config
cd .git
git branch -r
git branch -a
git remote
git pull
cd my-heritrix/
history
cd ukwa-heritrix-org/
git push -u origin main
git commit -m "first commit"
git add -A
git branch -M main
git remote add origin https://github.com/yuukimiyo/my-wayback.git
git branch -m master main
git reset --hard origin/main
git reset --head origin/HEAD
git reset --head origin/main
git fetch origin
git remote ls
git init
sudo chown yuuki:yuuki jobs
sudo chmod 777 jobs
sudo 777 jobs
sudo mkdir jobs
mkdir jobs
cd heritrix/
sudo mkdir heritrix
mkdir heritrix
cd /opt/
cd my-wayback/
mkdir my-wayback
cd jobs/
cd workspace/my-heritrix/
docker container run -it --rm -v ./jobs:/data -p 8080:8080 iipc/openwayback
cd installs/
git push
git commit -m "fix to my-env"
cp ../ukwa-heritrix-org/docker-compose.yml ./
git push -u origin master
git status
git branch -M master
git remote add origin git@github.com:yuukimiyo/my-heritrix.git
rm -rf .git
mv ukwa-heritrix my-heritrix
rm -rf my-heritrix
git clone git@github.com:ukwa/ukwa-heritrix.git
mv ukwa-heritrix ukwa-heritrix-org
vi generate-docker-compose-svg.sh
cd docker/
cd ukwa-heritrix/
cd www.dbj.jp/
cd jobs
vi docker-compose.
mkdir my-heritrix
chmod 777 jobs
cd wren/
cd state
cd cdx/
cd output/
cd integration-test-volumes/
cd target/
cd beans/
cd frequent/
cd mock-cdxserver/
cd shared/
cd target
cd selftest/
cd testdata
cd integration-test/
cd cd workspace/
cp ~/ダウンロード/*warc.gz ./owb/files1/
docker pull iipc/openwayback
cd .././
wget -P .//owb/files1/ https://github.com/iipc/openwayback-sample-overlay/raw/master/sample/warcs/example.com.warc.gz
mkdir -p ./owb/files1
mkdir openwayback
df
cd common/
cd gonb@v0.9.3/
cd github.com/janpfeifer/
cd mod/
cd sumdb/
cd pkg/
cd pg
cd go
cd janpfeifer/
cd github.com/
cd go.uber.org/
cd pkg
go env GOBIN
go install github.com/janpfeifer/gonb@latest && \
  go install golang.org/x/tools/cmd/goimports@latest && \
  go install golang.org/x/tools/gopls@latest
go env GOROOT
go env GOPATH
go run test.go
vi test.go
cd test-go/
mkdir test-go
mkdir sandbox
sudo apt-get install golang
vi WEB-20231126004142327-00001-48\~h3w\~8443.warc
cd ダウンロード
top
vi .env
rm index.html
vi index.html
wget http://localhost:8443/
docker compose up
vi compose.yml
id -u
compose up
compose up -d
cd ../my-heritrix/
cd my-mongodb/
cd my-monog
ss -t
ss
sudo vi /etc/resolv.conf
wget https://dl.min.io/server/minio/release/linux-amd64/archive/minio_20231120224007.0.0_amd64.deb -O minio.deb

cd tmp
ping minibox
sudo vi /etc/hosts
sudo vi /etc/nsswitch.conf
ssh yuuki@192.168.10.100 -i ~/.ssh/id_rsa
cd .ssh
vi id_rsa.pub
ssh-copy-id yuuki@192.168.10.100
ssh-keygen -t rsa -b 4096 -C "yuuki.miyo@gmail.com" -N ""
ssh 192.168.10.100
ping 192.168.10.100
vi cc-index.paths
cd data
cd 0/
cd vms
cd desktop
cd instances/
cd buildx/
cd desktop-build/
cd desktop-build/ls
cd fe9c6bd7a66301f49ca9b6a70b217107cd1284598bfc254700c989b916da791e/
cd meta/
cd contexts/
vi daemon.json
vi config.json
vi con
cd .docker/
cd .do
cd default/
vi default
cd /etc
cd .docker
ll -a
cd yuuki
cd /home
cd /mnt/data
mount -l
sudo mount -o remount,rw /dev/nvme0n1p3
mount -o remount,rw /dev/nvme0n1p3
kill 10531
fuser -muv /mnt/data
sudo umount /mnt/data
sudo apt install gparted
fc-list | grep CJK
fc-list | grep NK
fc-list | grep NKF
fc-list | grep NKf
fc-list | grep Gothic
fc-list
fc-list | grep Mincho
git commit -m "fix edinet scripts"
git reset
cd my-notebook-data/
docker compose stop
docker compose ls
ps -ax | grep python
ps -l | grep python
ps -A | grep python
lsof -i :9000
lsof | grep " 9000 "
lsof | grep 9000
lsof
code
cd ./my-notebook-data/
mv secrets ./my-notebook-data/
cp -r ../my-notebook/data/secrets ../
cp ../my-notebook/data/secrets ../
cd my-notebook-data
rm -rf my-local-notebook
rm -rm my-local-notebook
git clone git@github.com:yuukimiyo/my-notebook-data.git
rm -rf local-notebook
git commit -m "add jquants etc"
git reset my-testfile.txt
git reset my-testfile-by-bz2
git reset --soft HEAD^
git rm my-testfile-by-bz2
git remove my-testfile-by-bz2
git .ignore
cd my-notebook/
cd my-local-notebook/
mv my-notebook-local my-local-notebook
cd my-notebook
cd my-notebook-local/
mkdir my-notebook-local
sudo apt install ./code_1.84.2-1699528352_amd64.deb
sudo apt install code_1.84.2-1699528352_amd64.deb
cd tests
cd example/
cd public/
cd create-react-app-example/
cd react-pdf-highlighter/
cd test-pdf-highlighter/
npm start
git clone https://github.com/agentcooper/react-pdf-highlighter.git
mkdir test-pdf-highlighter
jupyter lab
cd my-dictionary/
cd my-music/
cd workspace/my-music/
cd PyTone/
cd workspace/PyTone/
PyTone/
vi Chord.py
vi __init__.py
rm -rf __pycache__
vi ChordSeries.py
mv pytone.py ChordSeries.py
cp pytone.py Chord.py
vi __
cd pytone/
mkdir tests
vi setup.py
vi pytone.py
pwd
cd my-music
vi LICENSE
mv setup.py __init__.py
cd pytone
mkdir pytone
rmdir pytone
mkdir PyTone
sudo apt install --reinstall ./google-chrome-stable_current_amd64\ \(1\).deb
docker cp ./Tokyo my-notebook:/etc/localtime
compose ps -q my-notebook
docker-compose ps -q my-nbotebook
cd workspace/my-notebook/
mv Tokyo workspace/my-notebook/
cp /usr/share/zoneinfo/Asia/Tokyo ./
docker compose logs
vi /usr/share/zoneinfo/Asia/Tokyo
compose log
compose logs
cargo run
cargo build
cd hello/
cargo new hello
rm hello
./hello
rustc hello.rs -o hello
vi hello.rs
cd rust/
mkdir rust
cd installs
cargo --version
fish_add_path -U /home/yuuki/.cargo/bin
env | grep PATH
env
$env
cd bin
cat env
echo $SHELL
which shell
vi env
cd ~/.cargo/
curl https://sh.rustup.rs -sSf | sh
mv my-score my-music
cd workspace/my-score/
sudo apt install --reinstall gnome-control-center
sudo apt install musescore3
sudo apt remove musescore
sudo apt uninstall musescore
sudo apt install musescore
which mscore3
which mscore
which musescore
sudo apt install mscore
which musescore.mscore
vi musescore.mscore
musescore.mscore
snap
cd /snap/bin/
mscore3
sudo rm /usr/bin/mscore3
rm /usr/bin/mscore3
sudo apt install snap
apt install snap
sudo ln -s /snap/bin/musescore.mscore /usr/bin/mscore3
ln -s /snap/bin/musescore.mscore /usr/bin/mscore3
ln -s /usr/bin/mscore3 /snap/bin/musescore.mscore
mscore
./MuseScore-4.1.1.232071203-x86_64.AppImage install
sudo apt install fuse
sudo apt install FUSE
apt install FUSE
sudo apt install musicscore
apt install musicscore
cd my-score
git commit -m "fetch 001"
cd workspace/my-dictionary/
cd 001_日本証券業協会/
cd finance-word/
cd my-cra
npm i winston
/usr/bin/google-chrome --remote-debugging-port=9222
which google-chrome
which chrome
cd 001_SyoukengyouKyoukai/
npm i fs
git commit -m "add readme"
git add README.md
echo "# my-dictionary" >> README.md
git commit -m "initial commit"
git remote add origin git@github.com:yuukimiyo/my-dictionary.git
mkdir finance-word
mv my-crawler my-dictionary
mv yk-dictionary
cd my-score/
mkdir my-score
pip install music21
conda install numpy
conda install numpy -y
conda install pandas -y
cd my-crawler/
npm i puppeteer
npm i dataframe-js
npm i puppeteer-core
mkdir my-crawler
ijsinstall
npm install -g ijavascript
npm install ijavascript
npx ijsinstall
conda install nodejs
conda install -c nodejs
conda install jupyterlab
cd miniconda3/bin
source ~/miniconda3/bin/activate
cd conda
cd miniconda3/
~/miniconda3/bin/conda init fish
bash
cd my-storage
cd my-mysql/
mv my-rdb my-mysql
cd my-rdb/
mkdir my-rdb
sudo systemctl start elasticsearch && sudo systemctl start kibana
git commit -m "fix"
sudo systemctl start elasticsearch && sudo systemctl start kibana


sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-icu
sudo systemctl stop kibana && sudo systemctl stop elasticsearch


sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install icu_normalizer
sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install analysis-kuromoji
sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install elasticsearch-analysis-icu
man base64
sudo systemctl stop kibana && sudo systemctl stop elasticsearch
sudo systemctl stop kibana && systemctl stop elasticsearch
vi sample2.b64
base64 sample2.pdf > sample2.b64
vi sample.b64
base64 sample.pdf > sample.b64
base64 sample.pdf
cd ドキュメント/
mv sample.pdf ドキュメント/
bash ./elasticsearch-ingest-sample.sh
vi elasticsearch-ingest-sample.sh
mkdir tmp
sudo systemctl start kibana
sudo systemctl start elasticsearch
sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install maper-attachments
sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install elasticsearch/elasticsearch-maper-attachments
sudo /usr/share/elasticsearch/bin/plugin install elasticsearch/elasticsearch-maper-attachments
sudo /usr/share/elasticsearch/bin/elasticsearch-plugin install mapper-attachments
cd /usr/share/elasticsearch/
sudo /usr/share/kibana/bin/elasticsearch-plugin install analysis-kuromoji
which elasticsearch
vi compose.yaml
docker compose -f compose.yaml -f compose-opensearch2.yaml up -d
mv edinet-nikon nikon
mv edinet-nikon data/
mkdir data
curl -o compose.yaml https://raw.githubusercontent.com/codelibs/docker-fess/master/compose/compose.yaml
curl -o compose-opensearch2.yaml https://raw.githubusercontent.com/codelibs/docker-fess/master/compose/compose-opensearch2.yaml
cd fess
mkdir fess
rm -rf docker-fess
cd compose/
cd docker-fess/
vi compose-opensearch2.yaml
vi compose
git clone https://github.com/codelibs/docker-fess.git
sudo ./bin/elasticsearch-plugin install https://github.com/WorksApplications/elasticsearch-sudachi/releases/download/v3.0.0/analysis-sudachi-8.10.1-3.0.0.zip
sudo systemctl stop elasticsearch
sudo systemctl stop kibana
sudo ./bin/elasticsearch-plugin install https://github.com/WorksApplications/elasticsearch-sudachi/releases/download/v3.0.0/analysis-sudachi-8.6.0-3.0.0.zip
./bin/elasticsearch-plugin install https://github.com/WorksApplications/elasticsearch-sudachi/releases/download/v3.0.0/analysis-sudachi-8.6.0-3.0.0.zip
cd $ES_HOME
ip addr show
ping localhost
ip address
ip address -a
ip -h
ip show a
ip all
ipconfig getifaddr en0
sudo chown docker-user:docker-group http_ca.crt
chown docker-user:docker-group http_ca.crt
chown docker-user:docker-user http_ca.crt
cd secrets/
sudo mv http_ca.crt secrets/
mv http_ca.crt secrets/
mv http_ca.crt data
cd workspace/my-
mv http_ca.crt workspace/my-notebook/
sudo curl --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic:=yvjLb_BTfe97z-dWGSt https://localhost:9200
sudo /usr/share/kibana/bin/kibana-verification-code
sudo /usr/share/elasticsearch/bin/elasticsearch-create-enrollment-token -s kibana --url "https://localhost:9200"
sudo systemctl status kibana
sudo apt install kibana
sudo curl --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic:yvjLb_BTfe97z-dWGSt https://localhost:9200
curl --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic:yvjLb_BTfe97z-dWGSt https://localhost:9200
curl -s http://localhost:9200/
sudo systemctl restart elasticsearch
vi elastic-password.txt
cd elasticsearch/
cd install
curl --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic:=yvjLb_BTfe97z-dWGSt https://localhost:9200
sudo /usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic
sudo /usr/share/elasticsearch/bin/elasticsearch-setup-passwords interactive
set
R
sudo /usr/share/elasticsearch/bin/elasticsearch-reset-password
cat /etc/passwd
sudo apt-get install elasticsearch
sudo rm -R /var/lib/elasticsearch/
sudo apt-get purge elasticsearch
/usr/share/elasticsearch/bin/elasticsearch-reset-password -u elastic
sudo rm -R elasticsearch
cd /var/lib
sudo apt-get remove elasticsearch
echo $ELASTIC_PASSWORD
sudo curl --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic:$ELASTIC_PASSWORD https://localhost:9200
ls /etc/elasticsearch/certs/
curl --cacert /etc/elasticsearch/certs/http_ca.crt -u elastic:$ELASTIC_PASSWORD https://localhost:9200
export ELASTIC_PASSWORD="password"
sudo systemctl status elasticsearch -l
sudo systemctl start elasticsearch.service
systemctl list-unit-files -t service | grep elastic
systemctl list-unit-files -t service
systemctl list-unit-files -t service | grep enabled
sudo apt-get update
echo "deb [signed-by=/usr/share/keyrings/elasticsearch-keyring.gpg] https://artifacts.elastic.co/packages/8.x/apt stable main" | sudo tee /etc/apt/sources.list.d/elastic-8.x.list
sudo apt-get install apt-transport-https
wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | sudo gpg --dearmor -o /usr/share/keyrings/elasticsearch-keyring.gpg
mkdir elasticsearch
mkdir installs
sudo apt install ./code_1.82.2-1694671812_amd64.deb
sudo snap install --classic code
vi jquants_get-mglist.ipynb
cd statistics-box/
cd my-
sudo apt install ./VNC-Viewer-7.6.0-Linux-x64.deb
sudo apt install ./VNC-Viewer-7.6.0-Linux-x64.rpm
timidity -iA
sudo apt install aconnectgui
sudo apt install vkeybd vmpk
sudo apt-get install freepats fluid-soundfont-gm fluid-soundfont-gs
sudo apt-get install timidity timidity-interfaces-extra
sudo apt install rosegarden
alsamixer
sudo apt install pulseaudio
sudo apt install alsa-base
sudo apt-get install libstdc++
sudo apt install libstdc++
sudo apt install libc6-dev
reaper
sudo apt install libgdk3.0-cil
sudo apt search libgdk3-cil
sudo apt search libgdk3.?-cil
sudo apt search libgdk3.*-cil
sudo apt search libgdk3.0-cil
sudo apt install libgdk3.0-cli
sudo apt install libgdk-3.0-cli
sudo apt install libgdk-3.0
sudo apt install libgdk
sudo apt install libgdk-3
sudo apt search libgdk-3
sudo apt search libgdk-3.0
sudo apt install libgdk3
sudo apt install libSwell
sudo apt install libswell
sudo apt search libswell
sudo apt search libstdc++6
sudo apt search libstdc++5
sudo apt search libstdc++
sudo apt search libstdc++4
sudo apt search libstdc
sudo apt install gcc4
sudo apt install gcc
sudo apt install libstdc
sudo apt install libc6
apt install libc6
vi readme-linux.txt
cd reaper_linux_i686/
./install-reaper.sh
tar xfv reaper682_linux_i686.tar
xz -dv reaper682_linux_i686.tar.xz
cd ダウンロード￥
sudo apt upgrade
sudo apt update
sudo vi google-chrome.list
vi google-chrome.list
cd /etc/apt/sources.list.d/
cd old/
ps
:q
git ls-files
fisher list
curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher
ssh -T git@github.com
vi my-github_id_rsa.pub
vi my-github_id_rsa
mv id_rsa.pub my-github_id_rsa.pub
mv id_rsa my-github_id_rsa
mv my-github_id_rsa
git commit -m "fix readme"
git push --set-upstream origin master
git remote add origin https://github.com/yuukimiyo/PyWikidump.git
cd PyWikidump/
cd lib
git remote add origin https://github.com/yuukimiyo/my-notebook-data.git
git commit -m "remove big files"
git rm --cached sandbox/my-testfile-by-bz2
git rm --cached sandbox/my-testfile
git rm --cached lib/PyWikidump/* -r
git rm --cached lib/PyWikidump/*
git commit -m "remove data files"
git rm --cached data/sandbox/minio-test.ipynb
git rm --cached data/sandbox/.ipynb_checkpoints/minio-test-checkpoint.ipynb
cd..
sudo vi mongo-credentials_template.json
sudo vi minio-credentials_template.json
vi minio-credentials_template.json
cp minio-credentials.json minio-credentials_template.json
cd wiki-dump/
git commit -m "remove data folder"
git add *
vi .git
vi WikiText.py
cd pywikidump/
curl -skL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher
git config --global http.sslverify false
gh auth login
fisher install jorgebucaran/fisher
fisher jorgebucaran/fisher
git config --global http.sslCAinfo /etc/ssl/certs/ca-certificates.crt
sudo update-ca-certificates
cd cacert.org/
cd ca-certificates/
cd /usr/local/share
sudo wget -P /usr/local/share/ca-certificates/cacert.org http://www.cacert.org/certs/root.crt http://www.cacert.org/certs/class3.crt
sudo mkdir /usr/local/share/ca-certificates/cacert.org
mkdir cacert.org
fisher install fisher
curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish
sudo apt-get install --reinstall ca-certificates
curl -L https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish
curl -skL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish
sudo vi /etc/ssl/openssl.cnf
sudo /etc/ssl/openssl.cnf
sudo apt-get install ca-certificates
curl
curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish test.fish
fish
cat .config/fish/functions/fisher.fish
curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | source && fisher install jorgebucaran/fisher

curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher $plugins
fish --version
fish version
fish_config
vi Makefile
cd blog.ymiyo.com/
git clone https://github.com/yuukimiyo/blog.ymiyo.com.git
vi pywikidump.py
mv wikitext.py WikiText.py
vi wikitext.py
cp pywikidump.py wikitext.py
mv pyarrot.py pywikidump.py
cd Py
ln -s /home/yuuki/workspace/my-notebook/data/lib/PyWikidump /home/yuuki/workspace/
mv PyWikidump ./old/
mkdir old
rm test.txt
vi test.txt
cd lib/
cp -R PyWikidump my-notebook/data/lib/
mkdir lib
vi pyarrot.py
mv pyarrot pywikidump
vi sample_detail.py
cd sample/
cp -r PyArrot PyWikidump
git clone https://github.com/yuukimiyo/PyArrot.git
rm -rf pywikidump
lw
mkdir pywikidump
vi jawiki-20230620-pages-articles-multistream-index.txt
sudo vi mongo-credentials.json
vi mongo-credentials.json
cd data/
docker compose down
vi jawiki-20230620-redirect.sql
sudo snap refresh snap-store
sudo killall snap-store
mongodb-compass
sudo apt --fix-broken install
sudo apt install gconf2-common
sudo apt-get install libgconf-2-4
sudo apt install libg
sudo apt install libgconf2
sudo apt install libgconf2-4
sudo apt install libgconf
sudo dpkg -i mongodb-compass_1.38.2_amd64.deb
cd workspace/my-mongodb/
sudo docker compose down
mv mongodb my-mongodb
cd mongodb/
mkdir mongodb
docker compose rm
docker compose remove
rm -rf data
docker exec -it --user root my-notebook /bin/bash
docker run -it --rm --network my-network ytabuchi/net-client
git commit -m "Add common network settings"
docker network create my-network
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' 465e314254b1127c47ab929400cc47a7b1919b58655ede68ae5f9b2651df4004
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' my-notebook
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' notebook-1
docker run -it --rm ytabuchi/net-client
mv minio-test my-storage
rm -rf my-docker
sudo rm -rf docker-jupyter
rm -rf docker-jupyter
sudo chgrp docker-group data
git config --global user.name "yuukimiyo"
git config --global user.email "yuuki.miyo@gmail.com"
cp ../docker-jupyter/README.md ./
cp ../docker-jupyter/compose.yml ./
git clone https://github.com/yuukimiyo/my-notebook.git
git clone git@github.com:yuukimiyo/my-notebook.git
rm -rf my-notebook
mkdir my-notebook
gh issue list
sudo apt install gh
rm .env
mv notebook data
sudo vi /etc/group
vi Untitled.ipynb
rm test
vi test
cd notebook/
sudo chgrp docker-group notebook
chgrp docker-group notebook
sudo usermod -aG docker-group docker-user
sudo usermod -aG docker-group docker-group
vi /etc/group
sudo usermod -aG docker-group yuuki
sudo usermod -aG yuuki docker-group
mkdir notebook
sudo rm -rf notebook
rm -rf notebook
chmod 776 notebook
sudo usermod -aG 1000 docker-user
sudo useradd -g docker-group -u 100999 docker-user
sudo groupadd -g 100099 docker-group
vi /etc/passwd
vi .
cd minio-test/
cd workspace/docker-jupyter/
cd docker-jupyter/
docker run hello-world
docker -v
docker compose ps
rm -rf minio
l
cd workspace/minio-test/
cd minio/
mkdir minio
chmod 777 data
vim compose.yml
sudo apt install vim
rm -r data
vi do
mkdir minio-test
sudo apt install -y gcc make build-essential libssl-dev libffi-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev liblzma-dev

sudo apt install pyenv
pip install pyenv
sudo apt install pip
sudo api install pip
python3 -V
cd workspace/my-docker/
cd my-docker/
mkdir my-docker
mv my-jupyter docker-jupyter
mv docker-compose.yml compose.yml
docker ps -a
docker ps -A
cd my-jupyter/
mv my-notebook my-jupyter
chmod o+w notebook
docker compose version
docker compose build
which docker-compose
sudo usermod -s /usr/bin/fish yuuki
sudo apt install fish
sudo apt-add-repository ppa:fish-shell/release-3
mkdir workspace
sudo apt install terminator
sudo add-apt-repository ppa:mattrose/terminator
docker-compose
systemctl --user start docker-desktop
sudo apt-get install ./docker-desktop-4.20.1-amd64.deb
cd /tmp
mv docker-desktop-4.20.1-amd64.deb /tmp/
sudo docker run hello-world
sudo rm -rf /var/lib/containerd
sudo rm -rf /var/lib/docker
sudo apt-get purge docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin docker-ce-rootless-extras
sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
sudo chmod a+r /etc/apt/keyrings/docker.gpg
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
sudo install -m 0755 -d /etc/apt/keyrings
sudo apt-get install ca-certificates curl gnupg
kvm-ok
sudo apt install cpu-checker
sudp apt install cpu-checkersudo apt install cpu-checker
sudp apt install cpu-checker
ls -al /dev/kvm
echo $USER
sudo usermod -aG kvm $USER
$USER
lsmod | grep kvm
modprobe kvm_intel
modprobe kvm
rm -r $HOME/.docker/desktop
sudo apt remove docker-desktop
sudo apt install gnome-terminal
sudo apt-get remove guake
sudo apt-get -y install guake
sudo bash -c 'echo "yuuki ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/yuuki'
sudo apt install gnome-tweaks
sudo add-apt-repository universe
